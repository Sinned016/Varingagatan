import {
  Timestamp,
  arrayRemove,
  arrayUnion,
  doc,
  getDoc,
  updateDoc,
} from "firebase/firestore";
import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";
import { db } from "../config/firebase";
import useAuthState from "./useAuthState";
import { Button, Modal, Box, Typography } from "@mui/material";
import likeWhite from "../assets/icons/likeWhite.png";
import likeRed from "../assets/icons/likeRed.png";
import StarRating from "./StarRating";
import FinishedRating from "./FinishedRating";
import { calculateAverageRating } from "../functions/calculateAverageRating";
import { FaTimes, FaTrash } from "react-icons/fa";
import Review from "./Review";

export default function Bookinfo() {
  let { id } = useParams();
  const [audioBookInfo, setAudioBookInfo] = useState();
  const { signedInUser, isAdmin } = useAuthState(); // Use the custom hook to get authentication state

  const [reviewTitle, setReviewTitle] = useState("");
  const [reviewTitleError, setReviewTitleError] = useState("");
  const [reviewContent, setReviewContent] = useState("");
  const [reviewContentError, setReviewContentError] = useState("");
  const [reviewRatingError, setReviewRatingError] = useState("");
  const [open, setOpen] = useState(false);
  const [openDeleteReview, setOpenDeleteReview] = useState(false);
  const [reviewIdToDelete, setReviewIdToDelete] = useState(null);
  const [displayedReviews, setDisplayedReviews] = useState(5);
  const [reviewRating, setReviewRating] = useState(0);
  const [averageRating, setAverageRating] = useState(null);
  const [description, setDescription] = useState(true);

  // Trigger to do the useEffect again and fetch all data.
  const [submitTrigger, setSubmitTrigger] = useState(false);
  //Testing Timestamp, gonna use it later
  // const time = Timestamp.now();
  // console.log(time.toDate());

  useEffect(() => {
    async function getData() {
      const audioBookDocRef = doc(db, "audioBooks", id);
      try {
        const booksData = await getDoc(audioBookDocRef);

        if (booksData.exists()) {
          const data = booksData.data();
          setAudioBookInfo(data); // Set bookInfo state with the data of the document

          const averageRating = calculateAverageRating(data.reviews);

          setAverageRating(averageRating);
        } else {
          console.log("No such document!");
        }
      } catch (err) {
        console.error(err);
      }
    }
    getData();
  }, [id, submitTrigger]);

  function openModal(e) {
    e.preventDefault();

    if (!reviewTitle || reviewTitle.length < 3) {
      setReviewTitleError("Please provide a title for your review");
      return;
    } else {
      setReviewTitleError("");
    }

    if (!reviewContent) {
      setReviewContentError("Please provide your review before submitting");
      return;
    } else {
      setReviewContentError("");
    }

    if (reviewRating === 0) {
      setReviewRatingError("Please provide a rating before submitting");
      return;
    } else {
      setReviewRatingError("");
    }

    setOpen(true);
  }

  async function handleSubmitReview(e) {
    e.preventDefault();

    const audioBookDocRef = doc(db, "audioBooks", id);
    const newTimestamp = Timestamp.now();

    const payloadData = {
      userId: signedInUser.uid,
      reviewId: `email-${signedInUser.email}-title-${reviewTitle}-timestamp-${newTimestamp}`,
      email: signedInUser.email,
      reviewTitle: reviewTitle,
      reviewContent: reviewContent,
      reviewRating: reviewRating,
      timestamp: newTimestamp,
      likes: [],
    };

    try {
      await updateDoc(audioBookDocRef, {
        reviews: arrayUnion(payloadData), // Add the new review to the existing reviews array
      });

      setReviewTitle("");
      setReviewContent("");
      setReviewRating(0);
      setOpen(false);
      setSubmitTrigger(!submitTrigger);
    } catch (err) {
      console.error(err);
    }
  }

  function handleCancelReview(e) {
    e.preventDefault();

    setReviewTitle("");
    setReviewContent("");
  }

  const handleShowMoreReviews = () => {
    setDisplayedReviews(displayedReviews + 5);
  };

  async function rateReview(e, reviewId, action) {
    e.preventDefault();

    const audioBookDocRef = doc(db, "audioBooks", id);
    //const newTimestamp = Timestamp.now();

    try {
      const bookSnapshot = await getDoc(audioBookDocRef);
      const bookData = bookSnapshot.data();

      const reviewIndex = bookData.reviews.findIndex(
        (review) => review.reviewId === reviewId
      );

      // The specific review the user has liked
      const review = bookData.reviews[reviewIndex];

      if (action === "like") {
        const userLiked = review.likes.includes(signedInUser.uid);

        if (!userLiked) {
          bookData.reviews[reviewIndex].likes.push(signedInUser.uid);
          await updateDoc(audioBookDocRef, {
            reviews: bookData.reviews,
          });
        } else {
          const userIndex = review.likes.indexOf(signedInUser.uid);
          bookData.reviews[reviewIndex].likes.splice(userIndex, 1);
          await updateDoc(audioBookDocRef, {
            reviews: bookData.reviews,
          });
        }
      }
      setSubmitTrigger(!submitTrigger);
    } catch (err) {
      console.error(err);
    }
  }

  async function handleDeleteReviewModal(reviewId) {
    setReviewIdToDelete(reviewId);
    setOpenDeleteReview(true);
  }

  //Create a function that works with both audio books and books, now i have 2 functions which kinda looks the same.
  async function deleteReview() {
    if (isAdmin) {
      try {
        // Get a reference to the book document
        const audioBookDocRef = doc(db, "audioBooks", id);

        // Fetch the book document
        const audioBookDocSnap = await getDoc(audioBookDocRef);

        if (audioBookDocSnap.exists()) {
          const bookData = audioBookDocSnap.data();
          const reviews = bookData.reviews;

          // Find the review to remove
          const reviewToRemove = reviews.find(
            (review) => review.reviewId === reviewIdToDelete
          );

          if (reviewToRemove) {
            // Update the book document to remove the review from the array
            await updateDoc(audioBookDocRef, {
              reviews: arrayRemove(reviewToRemove),
            });

            console.log("Review deleted successfully");
          } else {
            console.log("Review not found");
          }
        } else {
          console.log("Book not found");
        }
      } catch (err) {
        console.error("Error deleting review: ", err);
      }
      setSubmitTrigger(!submitTrigger);
      setReviewIdToDelete(null);
      setOpenDeleteReview(false);
    }
  }

  return (
    <div className="">
      {audioBookInfo ? (
        <div className="bg-slate-50 p-6">
          <div className="   flex flex-col md:flex-row pb-16">
            <div className="mr-6 flex-shrink-0">
              <img className=" h-72 md:h-96" src={audioBookInfo.image} alt="" />

              <a
                href={audioBookInfo.linkToPurchase}
                target="_blank"
                rel="noopener noreferrer"
              >
                <button className="mt-5 px-3 py-2 bg-red-500 hover:bg-red-600 rounded text-white w-full">
                  Köp boken
                </button>
              </a>
            </div>

            <div className="flex flex-col flex-grow">
              <h1 className="text-4xl mb-2 font-semibold">
                {audioBookInfo.title}
              </h1>
              <div className="flex flex-row">
                <p className="mr-2">{audioBookInfo.author}</p>
                <p>{audioBookInfo.releaseDate}</p>
              </div>
              <p className="font-semibold text-lg">{audioBookInfo.price} kr</p>

              <div className="flex flex-row justify-evenly mt-4">
                <button
                  className={description && "font-semibold"}
                  onClick={() => setDescription(true)}
                >
                  Beskrivning
                </button>
                <button
                  className={!description && "font-semibold"}
                  onClick={() => setDescription(false)}
                >
                  Specifikationer
                </button>
              </div>

              <div className="border mt-2 border-muted-foreground"></div>

              {description && (
                <div className="mt-5">
                  <p>{audioBookInfo.description}</p>
                </div>
              )}

              {!description && (
                <div className="mt-5 flex flex-row justify-between">
                  <div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Format:</p>
                      <p>{audioBookInfo.type}</p>
                    </div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Språk:</p>
                      <p>{audioBookInfo.language}</p>
                    </div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Antal sidor:</p>
                      <p>{audioBookInfo.pages}</p>
                    </div>
                  </div>

                  <div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Pris:</p>
                      <p>{audioBookInfo.price}</p>
                    </div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Vikt:</p>
                      <p>{audioBookInfo.weight}</p>
                    </div>
                  </div>

                  <div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Utgivningsdatum:</p>
                      <p>{audioBookInfo.releaseDate}</p>
                    </div>
                    <div className="flex flex-row">
                      <p className="font-semibold mr-1">Utgivare:</p>
                      <p>{audioBookInfo.publisher}</p>
                    </div>
                  </div>
                </div>
              )}

              <div></div>
            </div>
          </div>

          <Review
            submitTrigger={submitTrigger}
            setSubmitTrigger={setSubmitTrigger}
            typeofBook="audioBook"
          />
          {audioBookInfo.reviews?.length > 0 && (
            <div className="reviews-container">
              <h2 className="h2-title">Reviews</h2>
              <div className="line-space"></div>

              {/* Map over only the number of reviews specified by displayedReviews */}
              {audioBookInfo.reviews
                .slice(0, displayedReviews)
                .map((review, i) => {
                  return (
                    <div className="review-container" key={i}>
                      <h3 className="h3-title">{review.reviewTitle}</h3>

                      <FinishedRating score={review.reviewRating} size={25} />

                      <div className="email-date">
                        <p>BY {review.email}</p>
                        <p>
                          {new Date(
                            review.timestamp.seconds * 1000
                          ).toLocaleString()}
                        </p>
                      </div>
                      <p>{review.score}</p>
                      <p className="margin-bot review-content text-sm">
                        {review.reviewContent}
                      </p>

                      <div className="reviews-rating-container">
                        {isAdmin && (
                          <FaTrash
                            className="trash-icon"
                            size="22"
                            onClick={() =>
                              handleDeleteReviewModal(review.reviewId)
                            }
                          />
                        )}

                        <p className="total-reviews">
                          {review.likes && review.likes.length > 0
                            ? review.likes.length
                            : ""}
                        </p>

                        {signedInUser ? (
                          <div
                            className={
                              review.likes &&
                              review.likes.includes(signedInUser?.uid)
                                ? "liked"
                                : "unliked"
                            }
                            onClick={(e) =>
                              rateReview(e, review.reviewId, "like")
                            }
                          >
                            {review.likes &&
                            review.likes.includes(signedInUser.uid) ? (
                              <img
                                className="rate-icon"
                                src={likeWhite}
                                alt=""
                              />
                            ) : (
                              <img className="rate-icon" src={likeRed} alt="" />
                            )}
                          </div>
                        ) : (
                          ""
                        )}
                      </div>
                      <div className="line-space"></div>
                    </div>
                  );
                })}
              {/* Button to show more reviews */}
              {audioBookInfo.reviews.length > displayedReviews && (
                <button
                  onClick={handleShowMoreReviews}
                  className="show-more-btn"
                >
                  Show More
                </button>
              )}
            </div>
          )}

          <div>
            <Modal
              open={openDeleteReview}
              onClose={() => setOpenDeleteReview(false)}
            >
              <Box
                sx={{
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  transform: "translate(-50%, -50%)",
                  width: 400,
                  bgcolor: "#333",
                  boxShadow: 24,
                  p: 4,
                  borderRadius: "1em",
                  overflow: "auto",
                  outline: "none",
                }}
              >
                <div>
                  <h1 className="h3-title text-center">Delete Review?</h1>
                  <p className="modal-text">
                    Are you sure you want to{" "}
                    <span style={{ fontWeight: "bold" }}>delete</span> this
                    review?
                  </p>

                  <div className="modal-button-container">
                    <button
                      style={{ marginBottom: ".5em" }}
                      className="modal-button bg-green-500 hover:bg-green-600 active:bg-green-700 text-black"
                      onClick={deleteReview}
                    >
                      Yes
                    </button>
                    <button
                      className="modal-button bg-red-500 hover:bg-red-600 active:bg-red-700 text-black"
                      onClick={() => {
                        setOpenDeleteReview(false);
                        setReviewIdToDelete(null);
                      }}
                    >
                      No
                    </button>
                  </div>

                  <FaTimes
                    className="modal-close"
                    size="25"
                    onClick={() => setOpenDeleteReview(false)}
                  />
                </div>
              </Box>
            </Modal>
          </div>
        </div>
      ) : (
        ""
      )}
    </div>
  );
}
